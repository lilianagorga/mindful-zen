<!DOCTYPE html>
<html lang="en">
  <%- include('partials/head') %>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard</title>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
  <%- include('partials/header') %>
  <main>
    <h1>Admin Dashboard</h1>
    <section>
      <h2>Users</h2>
      <ul>
        <% users.forEach(user => { %>
          <li>
            <%= user.email %> - <%= user.firstName %> <%= user.lastName %>
            <button data-user-id="<%= user.id %>" class="delete-user-btn">Delete User</button>
            <form class="update-user-form" data-user-id="<%= user.id %>" style="display: none;">
              <input type="text" name="firstName" placeholder="First Name" value="<%= user.firstName %>" required>
              <input type="text" name="lastName" placeholder="Last Name" value="<%= user.lastName %>" required>
              <input type="email" name="email" placeholder="Email" value="<%= user.email %>" required>
              <input type="password" name="password" placeholder="New Password">
              <button type="submit">Update User</button>
            </form>
            <button class="show-update-form-btn">Edit User</button>
          </li>
        <% }) %>
      </ul>
    </section>

    <section>
      <h2>Intervals</h2>
      <ul>
        <% intervals.forEach(interval => { %>
          <li>
            <strong>Start:</strong> <%= interval.startDate %> 
            <strong>End:</strong> <%= interval.endDate %> 
            <strong>Created by:</strong> <%= interval.user.firstName %> <%= interval.user.lastName %> (<%= interval.user.email %>)
            <button data-interval-id="<%= interval.id %>" class="delete-interval-btn">Delete Interval</button>
            <form class="update-interval-form" data-interval-id="<%= interval.id %>" style="display: none;">
              <input type="datetime-local" name="startDate" value="<%= new Date(interval.startDate).toISOString().slice(0,16) %>" required>
              <input type="datetime-local" name="endDate" value="<%= new Date(interval.endDate).toISOString().slice(0,16) %>" required>
              <button type="submit">Update Interval</button>
            </form>
            <button class="show-update-form-btn">Edit Interval</button>
          </li>
        <% }) %>
      </ul>
    </section>

    <section>
      <h2>Create New Interval</h2>
      <form id="create-interval-form">
        <label for="startDate">Start Date:</label>
        <input type="datetime-local" id="startDate" name="startDate" required>
        <label for="endDate">End Date:</label>
        <input type="datetime-local" id="endDate" name="endDate" required>
        <label for="userId">User ID:</label>
        <select id="userId" name="userId" required>
          <% users.forEach(user => { %>
            <option value="<%= user.id %>"><%= user.firstName %> <%= user.lastName %> (<%= user.email %>)</option>
          <% }) %>
        </select>
        <button type="submit">Create Interval</button>
      </form>
    </section>

    <section>
      <h2>Goals</h2>
      <ul>
        <% goals.forEach(goal => { %>
          <li>
            <strong>Name:</strong> <%= goal.name %>
            <strong>Interval:</strong>
            <% if (goal.interval) { %>
              <%= goal.interval.name || `Interval ${goal.interval.id}` %>
            <% } else { %>
              N/A
            <% } %>
            <button data-goal-id="<%= goal.id %>" class="delete-goal-btn">Delete Goal</button>
            <form class="update-goal-form" data-goal-id="<%= goal.id %>" style="display: none;">
              <input type="text" name="name" value="<%= goal.name %>" required>
              <select name="intervalId">
                <% intervals.forEach(interval => { %>
                  <option value="<%= interval.id %>" <%= interval.id === goal.interval.id ? 'selected' : '' %>>
                    <%= interval.name || `Interval ${interval.id}` %> - Created by <%= interval.user.firstName %> <%= interval.user.lastName %>
                  </option>
                <% }) %>
              </select>
              <button type="submit">Update Goal</button>
            </form>
            <button class="show-update-goal-form-btn">Edit Goal</button>
          </li>
        <% }) %>
      </ul>
    </section>
    
    <section>
      <h2>Create New Goal</h2>
      <form id="create-goal-form">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" required>
        <label for="intervalId">Interval:</label>
        <select id="intervalId" name="intervalId" required>
          <% intervals.forEach(interval => { %>
            <option value="<%= interval.id %>"><%= interval.name || `Interval ${interval.id}` %> - Created by <%= interval.user.firstName %> <%= interval.user.lastName %></option>
          <% }) %>
        </select>
        <button type="submit">Create Goal</button>
      </form>
    </section>
  </main>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const deleteUserButtons = document.querySelectorAll('.delete-user-btn');
      deleteUserButtons.forEach(button => {
        button.addEventListener('click', async function() {
          const userId = this.getAttribute('data-user-id');
          if (!confirm('Are you sure you want to delete this user?')) return;

          try {
            const response = await fetch(`/dashboard/${userId}`, {
              method: 'DELETE',
              headers: { 'Content-Type': 'application/json' }
            });

            if (response.ok) location.reload();
            else alert('Failed to delete user');
          } catch (error) {
            console.error(error);
            alert('An error occurred');
          }
        });
      });

      const updateUserForms = document.querySelectorAll('.update-user-form');
      updateUserForms.forEach(form => {
        form.addEventListener('submit', async function(event) {
          event.preventDefault();
          const userId = this.getAttribute('data-user-id');
          const formData = Object.fromEntries(new FormData(this));

          try {
            const response = await fetch(`/dashboard/${userId}`, {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(formData)
            });

            if (response.ok) location.reload();
            else alert('Failed to update user');
          } catch (error) {
            console.error(error);
            alert('An error occurred');
          }
        });
      });

      document.getElementById('create-interval-form').addEventListener('submit', async function(event) {
        event.preventDefault();
        const formData = Object.fromEntries(new FormData(this));

        try {
          const response = await fetch('/dashboard/intervals', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData),
          });

          if (response.ok) location.reload();
          else alert('Failed to create interval');
        } catch (error) {
          console.error(error);
          alert('An error occurred');
        }
      });

      const deleteIntervalButtons = document.querySelectorAll('.delete-interval-btn');
      deleteIntervalButtons.forEach(button => {
        button.addEventListener('click', async function() {
          const intervalId = this.getAttribute('data-interval-id');
          if (!confirm('Are you sure you want to delete this interval?')) return;

          try {
            const response = await fetch(`/dashboard/intervals/${intervalId}`, {
              method: 'DELETE',
              headers: { 'Content-Type': 'application/json' }
            });

            if (response.ok) location.reload();
            else alert('Failed to delete interval');
          } catch (error) {
            console.error(error);
            alert('An error occurred');
          }
        });
      });

      const updateIntervalForms = document.querySelectorAll('.update-interval-form');
      updateIntervalForms.forEach(form => {
        form.addEventListener('submit', async function(event) {
          event.preventDefault();
          const intervalId = this.getAttribute('data-interval-id');
          const formData = Object.fromEntries(new FormData(this));

          try {
            const response = await fetch(`/dashboard/intervals/${intervalId}`, {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(formData)
            });

            if (response.ok) {
              alert('Interval updated successfully');
              location.reload();
            } else {
              alert('Failed to update interval');
            }
          } catch (error) {
            console.error('Error:', error);
            alert('An error occurred while updating the interval');
          }
        });
      });

      const showUpdateFormButtons = document.querySelectorAll('.show-update-form-btn');
      showUpdateFormButtons.forEach(button => {
        button.addEventListener('click', function() {
          const form = this.previousElementSibling;
          form.style.display = form.style.display === 'none' ? 'block' : 'none';
        });
      });
    });

    document.addEventListener('DOMContentLoaded', function () {
    const deleteGoalButtons = document.querySelectorAll('.delete-goal-btn');
    deleteGoalButtons.forEach(button => {
      button.addEventListener('click', async function () {
        const goalId = this.getAttribute('data-goal-id');
        if (!confirm('Are you sure you want to delete this goal?')) return;

        try {
          const response = await fetch(`/dashboard/goals/${goalId}`, {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
          });

          if (response.ok) location.reload();
          else alert('Failed to delete goal');
        } catch (error) {
          console.error(error);
          alert('An error occurred');
        }
      });
    });
    const updateGoalForms = document.querySelectorAll('.update-goal-form');
    updateGoalForms.forEach(form => {
      form.addEventListener('submit', async function (event) {
        event.preventDefault();
        const goalId = this.getAttribute('data-goal-id');
        const formData = Object.fromEntries(new FormData(this));

        try {
          const response = await fetch(`/dashboard/goals/${goalId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData),
          });

          if (response.ok) location.reload();
          else alert('Failed to update goal');
        } catch (error) {
          console.error(error);
          alert('An error occurred');
        }
      });
    });
    const createGoalForm = document.getElementById('create-goal-form');
    createGoalForm.addEventListener('submit', async function (event) {
      event.preventDefault();
      const formData = Object.fromEntries(new FormData(this));

      try {
        const response = await fetch('/dashboard/goals', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData),
        });

        if (response.ok) location.reload();
        else alert('Failed to create goal');
      } catch (error) {
        console.error(error);
        alert('An error occurred');
      }
    });
    const showUpdateFormButtons = document.querySelectorAll('.show-update-goal-form-btn');
    showUpdateFormButtons.forEach(button => {
      button.addEventListener('click', function () {
        const form = this.previousElementSibling;
        form.style.display = form.style.display === 'none' ? 'block' : 'none';
      });
    });
  });
  </script>
  <%- include('partials/footer') %>
</body>
</html>