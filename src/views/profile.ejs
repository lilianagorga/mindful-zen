<!DOCTYPE html>
<html lang="en">
  <%- include('partials/head') %>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>User Profile</title>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
  <%- include('partials/header') %>
  <main class="profile-main">
    <section class="profile-section current-user-section">
      <h2>Your Details</h2>
        <p><strong>First Name:</strong> <%= user.firstName %></p>
        <p><strong>Last Name:</strong> <%= user.lastName %></p>
        <p><strong>Email:</strong> <%= user.email %></p>
    </section>
    
    <section class="profile-section">
      <h2>Update Your Profile</h2>
      <form id="updateProfileForm" data-user-id="<%= user.id %>" class="profile-form update-user-form">
        <input type="text" name="firstName" placeholder="First Name" value="<%= user.firstName %>" required>
        <input type="text" name="lastName" placeholder="Last Name" value="<%= user.lastName %>" required>
        <input type="email" name="email" placeholder="Email" value="<%= user.email %>" required>
        <input type="password" name="password" placeholder="New Password" minlength="6">
        <button type="submit">Update Profile</button>
      </form>
      <button data-user-id="<%= user.id %>" data-type="user" class="show-update-form-btn" id="updateProfileBtn">Edit Profile</button>
      <span id="update-profile-error" class="error-message"></span>
      <span id="update-profile-success" class="success-message"></span>
    </section>
    
    <section class="profile-section">
      <h2>Your Intervals</h2>
      <ul class="profile-list">
        <% intervals.forEach(interval => { %>
          <li>
            <strong>Start:</strong> <span class="interval-info"><%= interval.startDate %></span>
            <strong>End:</strong> <span class="interval-info"><%= interval.endDate %></span>
            <button data-interval-id="<%= interval.id %>" class="delete-interval-btn">Delete Interval</button>
            <form class="profile-form update-interval-form" data-interval-id="<%= interval.id %>">
              <input type="datetime-local" name="startDate" value="<%= new Date(interval.startDate).toISOString().slice(0,16) %>" required>
              <input type="datetime-local" name="endDate" value="<%= new Date(interval.endDate).toISOString().slice(0,16) %>" required>
              <button type="submit">Update Interval</button>
            </form>
            <button data-interval-id="<%= interval.id %>" data-type="interval" class="show-update-form-btn">Edit Interval</button>
            <span class="error-message" data-interval-id="<%= interval.id %>"></span>
            <span class="success-message" data-interval-id="<%= interval.id %>"></span>
          </li>
        <% }) %>
      </ul>
    </section>
    
    <section class="profile-section">
      <h2>Create New Interval</h2>
      <form id="create-interval-form-profile">
        <label for="startDate">Start Date:</label>
        <input type="datetime-local" id="startDate" name="startDate" required>
        <label for="endDate">End Date:</label>
        <input type="datetime-local" id="endDate" name="endDate" required>
        <button type="submit">Create Interval</button>
        <span id="create-profile-interval-error" class="error-message"></span>
        <span id="create-profile-interval-success" class="success-message"></span>
      </form>
    </section>
    
    <section class="profile-section goals-profile-section">
      <h2>Your Goals</h2>
      <ul class="profile-list">
        <% goals.forEach(goal => { %>
          <li>
            <div class="content-wrapper-goals-profile">
              <strong>Name:</strong> <%= goal.name %>
              <strong>Interval:</strong> 
              <% if (goal.interval) { %>
                <%= goal.interval.name || `Interval ${goal.interval.id}` %>
              <% } else { %>
                N/A
              <% } %>
            </div>
            <div class="button-wrapper-profile">
              <button data-goal-id="<%= goal.id %>" class="delete-goal-btn">Delete Goal</button>
              <form class="profile-form update-goal-form" data-goal-id="<%= goal.id %>">
                <input type="text" name="name" value="<%= goal.name %>" required>
                <select name="intervalId">
                  <% intervals.forEach(interval => { %>
                    <option value="<%= interval.id %>" <%= interval.id === goal.intervalId ? 'selected' : '' %>>
                      <%= interval.name || `Interval ${interval.id}` %>
                    </option>
                  <% }) %>
                </select>
                <button type="submit">Update Goal</button>
              </form>
              <button data-goal-id="<%= goal.id %>" data-type="goal" class="show-update-form-btn">Edit Goal</button>
            </div>
            <span class="error-message" data-goal-id="<%= goal.id %>"></span>
            <span class="success-message" data-goal-id="<%= goal.id %>"></span>
          </li>
        <% }) %>
      </ul>
    </section>
    
    <section class="profile-section">
      <h2>Create New Goal</h2>
      <form id="create-goal-form-profile">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" required>
        <label for="intervalId">Interval:</label>
        <select id="intervalId" name="intervalId" required>
          <% intervals.forEach(interval => { %>
            <option value="<%= interval.id %>"><%= interval.name || `Interval ${interval.id}` %></option>
          <% }) %>
        </select>
        <button type="submit">Create Goal</button>
        <span id="create-profile-goal-error" class="error-message"></span>
        <span id="create-profile-goal-success" class="success-message"></span>
      </form>
    </section>
    <button data-user-id="<%= user.id %>" class="delete-user-btn" id="deleteProfileBtn">Delete My Profile</button>
    <span id="delete-profile-error" class="error-message"></span>
    <span id="delete-profile-success" class="success-message"></span>
  </main>

  <script src="/js/utils.bundle.js"></script>
  <script>
      document.addEventListener('DOMContentLoaded', function() {
        hideLoading();
        const updateUserForm = document.querySelector('.update-user-form');
          if (updateUserForm) {
            updateUserForm.addEventListener('submit', async function (event) {
            event.preventDefault();
            const formData = Object.fromEntries(new FormData(this));
            const errorMessageElement = document.getElementById('update-profile-error');
            const successMessageElement = document.getElementById('update-profile-success');

            try {
              showLoading("Updating User...");
              disableUI()
              const response = await fetch(`/profile`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData),
              });

              if (response.ok) {
                showSuccessMessage(successMessageElement, 'Profile updated successfully');
                setTimeout(() => location.reload(), 1000);
              } else {
                showErrorMessage(errorMessageElement, 'Failed to update profile');
              }
            } catch (error) {
              console.error('Error:', error);
              showErrorMessage(errorMessageElement, 'An error occurred while updating the profile');
            } finally {
              hideLoading();
              enableUI()
            }
          });
        }
        const showUpdateFormButtons = document.querySelectorAll('.show-update-form-btn');
          showUpdateFormButtons.forEach(button => {
            button.addEventListener('click', function () {
              const form = getAssociatedForm(button);
              if (!form) return;

              document.querySelectorAll('.update-user-form, .update-interval-form, .update-goal-form').forEach(otherForm => {
                otherForm.classList.remove('visible');
              });
              document.querySelectorAll('.show-update-form-btn').forEach(otherButton => {
                otherButton.style.display = 'inline';
              });
              const isVisible = form.classList.toggle('visible');
              button.style.display = isVisible ? 'none' : 'inline';
          });
        });
        const deleteUserButton = document.querySelector('.delete-user-btn');
          if (deleteUserButton) {
            deleteUserButton.addEventListener('click', async function () {
            const userId = this.getAttribute('data-user-id');
            const errorMessageElement = document.getElementById('delete-profile-error');
            const successMessageElement = document.getElementById('delete-profile-success');

            if (!errorMessageElement || !successMessageElement) {
              console.warn('Error or success message element not found for delete profile.');
              return;
            }

            try {
              showLoading("Deleting User...");
              disableUI()
              const response = await fetch(`/profile`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' },
              });

              if (response.ok) {
                showSuccessMessage(successMessageElement, 'Profile deleted successfully');
                setTimeout(() => (window.location.href = '/'), 1000);
              } else {
                showErrorMessage(errorMessageElement, 'Failed to delete profile');
              }
            } catch (error) {
              console.error('Error:', error);
              showErrorMessage(errorMessageElement, 'An error occurred while deleting the profile');
            } finally {
              hideLoading();
              enableUI()
            }
          });
        };
        const createIntervalForm = document.getElementById('create-interval-form-profile');
        if (createIntervalForm) {
          createIntervalForm.addEventListener('submit', async function (event) {
            event.preventDefault();
            const formData = Object.fromEntries(new FormData(this));
            const errorMessageElement = document.querySelector('#create-profile-interval-error');
            const successMessageElement = document.querySelector('#create-profile-interval-success');
              if (!errorMessageElement) {
                console.warn('Error message element for creating interval not found');
                return;
              }

            try {
              showLoading("Creating Interval...");
              disableUI()
              const response = await fetch('/profile/intervals', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData),
              });

              if (response.ok) {
                showSuccessMessage(successMessageElement, 'Interval created successfully');
                setTimeout(() => location.reload(), 1000);
              } else {
                  showErrorMessage(errorMessageElement, 'Failed to create interval');
                }
            } catch (error) {
              console.error(error);
              showErrorMessage(errorMessageElement, 'An error occurred');
            } finally {
              hideLoading();
              enableUI()
            }
          })
        };  
        const deleteIntervalButtons = document.querySelectorAll('.delete-interval-btn');
        deleteIntervalButtons.forEach(button => {
          button.addEventListener('click', async function() {
            const intervalId = this.getAttribute('data-interval-id');
            const errorMessageElement = document.querySelector(`.error-message[data-interval-id="${intervalId}"]`);
            const successMessageElement = document.querySelector(`.success-message[data-interval-id="${intervalId}"]`);
            if (!errorMessageElement) {
            console.warn(`Error message element not found for user ID ${intervalId}`);
            return;
            }

            try {
              showLoading("Deleting Interval...");
              disableUI()
              const response = await fetch(`/profile/intervals/${intervalId}`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' },
              });

              if (response.ok) {
                showSuccessMessage(successMessageElement, 'Interval deleted successfully');
                setTimeout(() => location.reload(), 1000);
              } else {
                showErrorMessage(errorMessageElement, 'Failed to delete interval');
              }
            } catch (error) {
              console.error('Error:', error);
              showErrorMessage(errorMessageElement, 'An error occurred while deleting the interval');
            } finally {
              hideLoading();
              enableUI()
            }
          });
        });

        const updateIntervalForms = document.querySelectorAll('.update-interval-form');
        updateIntervalForms.forEach(form => {
          form.addEventListener('submit', async function(event) {
            event.preventDefault();
            const intervalId = this.getAttribute('data-interval-id');
            console.log('Interval ID:', intervalId);

            const errorMessageElement = document.querySelector(`.error-message[data-interval-id="${intervalId}"]`);
            const successMessageElement = document.querySelector(`.success-message[data-interval-id="${intervalId}"]`);
            if (!errorMessageElement) {
            console.warn(`Error message element not found for user ID ${intervalId}`);
            return;
            }
            const formData = Object.fromEntries(new FormData(this));

            try {
              showLoading("Updating Interval...");
              disableUI()
              const response = await fetch(`/profile/intervals/${intervalId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData),
              });

              if (response.ok) {
                showSuccessMessage(successMessageElement, 'Interval updated successfully');
                setTimeout(() => location.reload(), 1000);
              } else {
                showErrorMessage(errorMessageElement, 'Failed to update interval');
              }
            } catch (error) {
              console.error('Error:', error);
              showErrorMessage(errorMessageElement, 'An error occurred while updating the interval');
            } finally {
              hideLoading();
              enableUI()
            }
          });
        });

        const deleteGoalButtons = document.querySelectorAll('.delete-goal-btn');
        deleteGoalButtons.forEach(button => {
          button.addEventListener('click', async function() {
            const goalId = this.getAttribute('data-goal-id');
            const errorMessageElement = document.querySelector(`.error-message[data-goal-id="${goalId}"]`);
            const successMessageElement = document.querySelector(`.success-message[data-goal-id="${goalId}"]`);
            if (!errorMessageElement) {
              console.warn(`Error message element not found for goal ID ${goalId}`);
              return;
            }
            
            try {
              showLoading("Deleting Goal...");
              disableUI()
              const response = await fetch(`/profile/goals/${goalId}`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' },
              });

              if (response.ok) {
                showSuccessMessage(successMessageElement, 'Goal deleted successfully');
                setTimeout(() => location.reload(), 1000);
              } else {
                showErrorMessage(errorMessageElement, 'Failed to delete goal');
              }
            } catch (error) {
              console.error(error);
              showErrorMessage(errorMessageElement, 'An unexpected error occurred');
            } finally {
              hideLoading();
              enableUI()
            }
          });
        });

        const updateGoalForms = document.querySelectorAll('.update-goal-form');
        updateGoalForms.forEach(form => {
          form.addEventListener('submit', async function(event) {
            event.preventDefault();
            const goalId = this.getAttribute('data-goal-id');
            const errorMessageElement = document.querySelector(`.error-message[data-goal-id="${goalId}"]`);
            const successMessageElement = document.querySelector(`.success-message[data-goal-id="${goalId}"]`);
            if (!errorMessageElement) {
              console.warn(`Error message element not found for goal ID ${goalId}`);
              return;
            }
            const formData = Object.fromEntries(new FormData(this));

            try {
              showLoading("Updating Goal...");
              disableUI()
              const response = await fetch(`/profile/goals/${goalId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData),
              });

              if (response.ok) {
                showSuccessMessage(successMessageElement, 'Goal updated successfully');
                setTimeout(() => location.reload(), 1000);
              } else {
                showErrorMessage(errorMessageElement, 'Failed to update goal');
              }
            } catch (error) {
              console.error(error);
              showErrorMessage(errorMessageElement, 'An error occurred');
            } finally {
              hideLoading();
              enableUI()
            }
          });
        });

        const createGoalForm = document.getElementById('create-goal-form-profile');
        createGoalForm.addEventListener('submit', async function(event) {
          event.preventDefault();
          const errorMessageElement = document.querySelector('#create-profile-goal-error');
          const successMessageElement = document.querySelector('#create-profile-goal-success');
          if (!errorMessageElement) {
            console.warn('Error message element for creating goal not found');
            return;
          }
          const formData = Object.fromEntries(new FormData(this));

          try {
            showLoading("Creating Goal...");
            disableUI()
            const response = await fetch('/profile/goals', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(formData),
            });

            if (response.ok) {
              showSuccessMessage(successMessageElement, 'Goal created successfully');
              setTimeout(() => location.reload(), 1000);
            } else {
                showErrorMessage(errorMessageElement, 'Failed to create goal');
              }
          } catch (error) {
            console.error(error);
            showErrorMessage(errorMessageElement, 'An error occurred');
          } finally {
            hideLoading();
            enableUI()
          }
        });

        document.querySelectorAll('.profile-form').forEach(form => {
            form.addEventListener('submit', function (event) {
              const inputs = form.querySelectorAll('[required]');
              let allValid = true;

              inputs.forEach(input => {
                if (!input.value.trim()) {
                  allValid = false;
                  input.classList.add('profile-error');
                  setTimeout(() => input.classList.remove('profile-error'), 3000);
                }
              });

              if (!allValid) {
                event.preventDefault();
                alert('Please fill in all required fields.');
              }
            });
          });
        })
  </script>
  <%- include('partials/footer') %>
  <div class="loading-overlay">
    Loading...
  </div>
</body>
</html>